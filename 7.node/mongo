mongoDB:一个数据库品牌的名字
mongod:启动数据库的命令
mongo:连接接数据库的命令
mongoose：在Node平台下，一个知名的用于帮助开发者连接mongoDB的包

一、MongoDB的增删改查
-C creat（新增数据）：
    db.集合名.insert(文档对象)
    *db.集合名.insertOne(文档对象)
    *db.集合名.insertMany([文档对象，文档对象])

-R read：
    *db.集合名.find(查询条件[,投影])
        举例:db.students.find({age:18}),查找年龄为18的所有信息
        举例:db.students.find({age:18,name:'jack'}),查找年龄为18且名字为jack的学生
        
    *常用操作符：
        1. < , <= , > , >= , !==   对应为： $lt $lte $gt $gte $ne
            举例：db.集合名.find({age:{$gte:20}}),年龄是大于等于20的
        2.逻辑或：使用$in 或 $or
            查找年龄为18或20的学生
            举例：db.students.find({age:{$in:[18,20]}})
            举例：db.students.find({$or:[{age:18},{age:20}]})
        3.逻辑非：$nin
        4.正则匹配：
            举例：db.students.find({name:/^T/})
        5.$where能写函数：this是当前的文档
            db.students.find({$where:function(){
                return this.name === 'zhangsan' && this.age === 18
            }}) 
                
    投影：过滤掉不想要的数据，只保留想要展示的数据
        举例：db.students.find({},{_id:0,name:0}),过滤掉id和name
        举例：db.students.find({},{age:1}),只保留age
        
    补充：db.集合名.findOne(查询条件[,投影])，默认只要找到一个！查唯一的值

-U update：
    db.集合名.update(查询条件,要更新的内容[,配置对象])
      
    //如下写法会将更新内容替换掉整个文档对象，但_id不受影响
        举例：db.students.update({name:'zhangsan'},{age:19})
    //使用$set修改指定内容，其他数据不变，不过只能匹配一个zhangsan
        举例：db.students.update({name:'zhangsan'},{$set:{age:19}})
    *//修改多个文档对象，匹配多个zhangsan,把所有zhangsan的年龄都替换为19
        举例：db.students.update({name:'zhangsan'},{$set:{age:19}},{multi:true})
     补充：db.集合名.updateOne(查询条件,要更新的内容[,配置对象])
          db.集合名.updateMany(查询条件,要更新的内容[,配置对象])

-D delete
    *db.集合名.remove(查询条件)
        //删除所有年龄小于等于19的学生
        举例：db.students.remove({age:{$lte:19}})

工作几乎不会使用数据库。
增删改查命令各记住一个。带*号的记一下


二、mongoose
//为什么用mongoose？ 想在Node平台下，更加简单、高效、安全、稳定的操作mongoDB
//当引入第三方库的时候，如果在本文件夹内没有找到node_modules，找外层文件夹，直到根目录

mongoose的增删改查
 -Create

	   模型对象.create(文档对象，回调函数)
 -Read

	   模型对象.find(查询条件[,投影],回调函数)不管有没有数据，都返回一个数组
	   模型对象.findOne(查询条件[,投影],回调函数)找到了返回一个对象，没找到返回null
 -Update

	  模型对象.updateOne(查询条件,要更新的内容[,配置对象],回调函数)
	  模型对象.updateMany(查询条件,要更新的内容[,配置对象],回调函数)
	  备注：存在update方法，但是即将废弃，查询条件匹配到多个时，依然只修改一个，强烈建议用updateOne或updateMany
 -Delete

	   模型对象.deleteOne(查询条件,回调函数)
	   模型对象.deleteMany(查询条件,回调函数)
	   备注：没有delete方法，会报错！  
备注： 以上所有方法，如果没有指定回调函数，则返回值是一个Promise的实例


mongoose的模块化
分为三步：，连接数据库，引入模式对象和创建约束对象，引入连接模块和模型

//1、该模块专门用来连接MongoDB数据库
var mongoose = require("mongoose");
mongoose.connect("mongodb://127.0.0.1/mongoose_test");
mongoose.connection.once("open",function () {
  console.log("MongoDB数据库已经成功连接");
});

//2、来定义Student的模型
var mongoose = require("mongoose");
var Schema = mongoose.Schema;

//创建约束对象
var stuSchema = new Schema({
  name:String,
  age:Number,
  gender:{
    type:String,
    default:"女"
  },
  address:String
});

//创建模型
var Student = mongoose.model("student",stuSchema);

//将Student暴露出去
module.exports = Student;

//3、引入db.js
require("./tools/db");

//引入student.js
var Student = require("./models/student");
Student.create({
  name:"二郎神",
  age:"48",
  gender:"男",
  address:"小圣庙"
},function (err) {
  if(!err){
    console.log("插入成功");
  }
});
